2) Enterprise Backend creates and signs a meta‑transaction, then submits to the Paladin Relayer API (safe channel)
The Backend builds the EIP‑712 payload (domain + message with nonce/deadline), signs it with the participant’s wallet (or KMS), and sends { payload, userSignature, nonce, deadline } to the Relayer.

3.	Relayer pre-check (off-chain ECDSA recover)
Before paying gas, the Paladin Relayer validates the signature off-chain:
	•	The recovered address equals the claimed user in the payload.
	•	The nonce has not been replayed.
	•	The deadline has not expired.
If any check fails, the Relayer rejects the request before broadcasting.
	4.	Relayer broadcasts to Paladin RPC
	•	If the Paladin network is configured with gasPrice = 0 (default in privacy/enterprise deployments), no gas sponsor is required; the Relayer simply forwards the signed payload.
	•	If the Paladin network runs with gasPrice ≠ 0, the Relayer must use a gas sponsor wallet to cover the transaction fee when broadcasting.