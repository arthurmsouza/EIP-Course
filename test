5.1.3 Issuer Bridge Operator

Introduction
The Issuer Bridge Operator is the trusted enterprise component responsible for monitoring bridge activity, validating proofs, and orchestrating mint/burn flows between external networks (Linea L2) and the Paladin privacy environment. It ensures regulatory compliance and guarantees that asset transfers are atomic and secure.

Solution
	•	The Operator monitors Proof-of-Burn and Proof-of-Mint events.
	•	It coordinates with the Paladin Relayer Service to request minting of private tokens or to validate proofs when unlocking tokens on the public network.
	•	The Operator also provides APIs for issuer applications to initiate or audit bridge transactions.

Layer & Implementation
	•	BridgeOperator Controller: Exposes APIs to issuer systems.
	•	BridgeOperator Service: Core logic for proof verification, orchestration of mint/burn, and integration with Paladin Relayer Service.
	•	Helpers:
	•	Web3J Helper → used to listen for events from external RPC nodes (Linea L2) and to submit transactions (e.g., unlock ERC20/3643 tokens).

5.1.2 Paladin Relayer Service

Introduction
The Paladin Relayer Service is implemented as a Node.js/TypeScript microservice. The rationale for this technology choice is twofold:
	1.	The SLE Backend Application is built in Java, but Paladin does not currently provide a Java SDK. To overcome this limitation, the Paladin TypeScript SDK is encapsulated within a dedicated Node.js service that exposes REST APIs to external systems.
	2.	The Relayer also facilitates bridging between public ERC20/3643 tokens (on Linea L2) and private Noto tokens (inside the Paladin environment). This requires tight integration with ethers.js and asynchronous event listeners, which are natively supported in the Node.js/TypeScript ecosystem.

Solution
The Relayer has two main functions:
	Bridge Functionality:
	•	Listens to NotoBridgeContract (Escrow) events on Linea L2 using ethers.js (via query or WebSocket).
	•	When a public token is locked, the Relayer mints an equivalent Noto private token inside the privacy domain using the Paladin SDK.
	•	In the reverse direction, when a Noto private token is burned, the Relayer receives a Proof of Burn from the Notary. This proof is then submitted to the NotoBridgeContract on Linea L2, which validates the proof and unlocks the corresponding public tokens.
	Private Balance Indexing:
 PaladiSDK provide Noto balance function (https://github.com/LF-Decentralized-Trust-labs/paladin/commit/53da41b0f7f4349740a02004b5ee5f9f6be46c59) for check current state per address, but this function won't work if you end up with a very large number of UTXOs. For a production solution is recommend indexing events as they happen, and maintaining a live database or other off chain snapshot of balances. 
	The Relayer listens to NotoHooksTracker events that signal changes in private state, these events are indexed off-chain to maintain a synchronized balance store per user address. 






5.1.4 Smart Contracts

Introduction
Smart Contracts form the backbone of the solution, ensuring automated and secure asset lifecycle management in both public (Linea L2) and private (Paladin) domains. All contracts are fully compatible with Solidity v0.8.x, enabling use of the latest compiler features and security improvements. These contracts support regulated ERC20/3643 tokens, private tokens (Noto), bridging logic, and auxiliary utilities for privacy-preserving interactions.

Solution
The smart contract landscape can be divided into three groups:

⸻

1. ERC Tokens (Public Side – Linea L2)
	•	ERC20/3643 Contracts → define regulated fungible assets, supporting compliance requirements such as whitelisting and transfer restrictions.
	•	These tokens can be escrowed into bridge contracts for transfer into the Paladin privacy domain.
	•	Implementation Modularity:
	•	Proxy Pattern (ERC-1967 / UUPS): Provides upgradeability while preserving the same contract address.
	•	Requirement: If Proxy is adopted, ERC contracts must be implemented as Upgradeable Contracts (using OpenZeppelin upgradeable libraries).
	•	Diamond Standard (EIP-2535): Provides fine-grained modularity for complex regulated token logic, allowing multiple facets (compliance, transfer rules, metadata, etc.) to be extended without redeployment.
	•	Both approaches are supported, and the chosen pattern depends on issuer requirements for governance, upgrade strategy, and extensibility.

⸻

2. Paladin Contracts (Private Side – Paladin Domain)
	•	Noto Contract → represents private token balances within Paladin’s privacy environment.
	•	NotoHookTracker Contract → extends the base NotoHook contract to emit detailed state-change events, enabling off-chain balance indexing by the Paladin Relayer.
	•	Factory Contracts → provide deployment and instantiation utilities for creating new private token contracts or privacy group instances dynamically.
	•	PrivacyGroup Contract → manages membership, rules, and access controls for executing private transactions within Paladin domains.
	•	Auxiliary Contracts → support utility functions required for Paladin domain operations (e.g., metadata storage, lifecycle management).

⸻

3. Bridge Contracts (Cross-Domain)
	•	NotoBridgeContract (Escrow) → deployed on Linea L2, used to lock ERC20/3643 tokens when bridging into Paladin. Upon receiving valid Proof of Burn confirmation from the Paladin Relayer, it unlocks the equivalent tokens back to the public domain.
	•	TokenBridge Contract / Message Contract → responsible for handling proof submission and synchronization of token states between Linea L2 and Paladin private domains.
	•	Implementation Note: The Bridge Contract implementation will be provided and maintained by ConsenSys, ensuring alignment with Linea infrastructure and interoperability standards.
